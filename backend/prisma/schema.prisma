// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  isVerified  Boolean  @default(false)
  isHost      Boolean  @default(false)
  joinDate    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  listings    Listing[]
  bookings    Booking[]
  reviews     Review[]
  favorites   Favorite[]

  @@map("users")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      AdminRole @default(ADMIN)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Listing {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  price       Decimal  @db.Decimal(10, 2)
  rating      Decimal? @db.Decimal(3, 2)
  reviewCount Int      @default(0)
  images      String[]
  type        String
  guests      Int
  bedrooms    Int
  bathrooms   Int
  amenities   String[]
  highlights  String[]
  category    String
  status      ListingStatus @default(ACTIVE)
  latitude    Decimal? @db.Decimal(10, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hostId      String
  host        User      @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  reviews     Review[]
  favorites   Favorite[]

  @@map("listings")
}

model Booking {
  id          String   @id @default(uuid())
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  totalPrice  Decimal  @db.Decimal(10, 2)
  status      BookingStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId   String
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  payment     Payment?

  @@map("bookings")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("favorites")
}

model Payment {
  id              String   @id @default(uuid())
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("usd")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  bookingId       String   @unique
  booking         Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
